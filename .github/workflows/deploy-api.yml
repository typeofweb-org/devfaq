name: Fly Deploy
on:
  push:
    branches:
      - develop
jobs:
  deploy:
    name: Deploy API
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Verify if deploy is needed
        id: should_run
        run: echo "HAS_CHANGES=$(cd apps/api && npx -y @typeofweb/ignore-monorepo-buildstep@latest)" >> $GITHUB_OUTPUT

      - name: Create GitHub deployment
        if: steps.should_run.outputs.HAS_CHANGES
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: "${{ github.token }}"
          environment-url: https://staging-api.devfaq.pl
          environment: production

      - name: Prepare flyctl
        if: steps.should_run.outputs.HAS_CHANGES
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to fly.io
        if: steps.should_run.outputs.HAS_CHANGES
        run: flyctl deploy --config apps/api/fly.toml --remote-only -e GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD) -e GIT_COMMIT_HASH=$(git rev-parse HEAD)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Update deployment status (success)
        if: steps.should_run.outputs.HAS_CHANGES && success()
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ github.token }}"
          environment-url: ${{ steps.deployment.outputs.environment_url }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: "success"

      - name: Update deployment status (failure)
        if: steps.should_run.outputs.HAS_CHANGES && failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ github.token }}"
          environment-url: ${{ steps.deployment.outputs.environment_url }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: "failure"
